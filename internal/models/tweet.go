// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tweet tweet
// swagger:model Tweet
type Tweet struct {

	// attributes
	// Required: true
	Attributes *TweetAttributes `json:"attributes"`

	// created on
	CreatedOn *int64 `json:"created_on,omitempty"`

	// Unique resource ID
	// Pattern: ^[[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
	ID string `json:"id,omitempty"`

	// modified on
	ModifiedOn *int64 `json:"modified_on,omitempty"`

	// Name of the resource tag
	// Required: true
	// Pattern: ^[A-Z a-z_]*$
	Tag *string `json:"tag"`
}

// Validate validates this tweet
func (m *Tweet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tweet) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Tweet) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", string(m.ID), `^[[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *Tweet) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	if err := validate.Pattern("tag", "body", string(*m.Tag), `^[A-Z a-z_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tweet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tweet) UnmarshalBinary(b []byte) error {
	var res Tweet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TweetAttributes tweet attributes
// swagger:model TweetAttributes
type TweetAttributes struct {

	// Tweet message
	// Required: true
	// Pattern: ^[A-Z a-z_]*$
	Message *string `json:"message"`

	// Unique ID of the user this resource is created by
	// Pattern: ^[[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this tweet attributes
func (m *TweetAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TweetAttributes) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.Pattern("attributes"+"."+"message", "body", string(*m.Message), `^[A-Z a-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TweetAttributes) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"user_id", "body", string(m.UserID), `^[[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TweetAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TweetAttributes) UnmarshalBinary(b []byte) error {
	var res TweetAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/pawmart/northerntech-simpletwitter/internal/models"
)

// DeleteTweetsIDNoContentCode is the HTTP code returned for type DeleteTweetsIDNoContent
const DeleteTweetsIDNoContentCode int = 204

/*DeleteTweetsIDNoContent Tweet deletion response

swagger:response deleteTweetsIdNoContent
*/
type DeleteTweetsIDNoContent struct {
}

// NewDeleteTweetsIDNoContent creates DeleteTweetsIDNoContent with default headers values
func NewDeleteTweetsIDNoContent() *DeleteTweetsIDNoContent {

	return &DeleteTweetsIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteTweetsIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteTweetsIDNotFoundCode is the HTTP code returned for type DeleteTweetsIDNotFound
const DeleteTweetsIDNotFoundCode int = 404

/*DeleteTweetsIDNotFound Tweet deletion error

swagger:response deleteTweetsIdNotFound
*/
type DeleteTweetsIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewDeleteTweetsIDNotFound creates DeleteTweetsIDNotFound with default headers values
func NewDeleteTweetsIDNotFound() *DeleteTweetsIDNotFound {

	return &DeleteTweetsIDNotFound{}
}

// WithPayload adds the payload to the delete tweets Id not found response
func (o *DeleteTweetsIDNotFound) WithPayload(payload *models.APIError) *DeleteTweetsIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tweets Id not found response
func (o *DeleteTweetsIDNotFound) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTweetsIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
